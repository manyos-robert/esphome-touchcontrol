substitutions:
  esp_name: tft1
  esp_hostname: esp-tft1

<<: !include ../.base.yaml

esphome:
  name: ${esp_hostname}
  platform: ESP32
  board: esp32dev
  
spi:
  - id: lcd
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12
  - id: touch
    clk_pin: GPIO25
    mosi_pin: GPIO32
    miso_pin: GPIO39

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_orange
    red: 100%
    green: 50%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_teal
    red: 0%
    green: 100%
    blue: 100%
  - id: my_gray
    red: 70%
    green: 70%
    blue: 70%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%

font:
  - file: "../fonts/Helvetica.ttf"
    id: helvetica_48
    size: 48
  - file: "../fonts/Helvetica.ttf"
    id: helvetica_36
    size: 36
  - file: "../fonts/Helvetica.ttf"
    id: helvetica_24
    size: 24
  - file: "../fonts/Helvetica.ttf"
    id: helvetica_12
    size: 12

image:
  - file: "icons/coffee.png"
    id: coffee
  - file: "icons/coffee_filled.png"
    id: coffee_filled
  - file: "icons/radio.png"
    id: radio
  - file: "icons/radio_filled.png"
    id: radio_filled
  

binary_sensor:
  - platform: status
    name: "Node Status"
    id: system_status

  - platform: touchscreen
    name: Coffee
    x_min: 55
    x_max: 115
    y_min: 40
    y_max: 100

  - platform: touchscreen
    name: Music
    x_min: 215
    x_max: 275
    y_min: 40
    y_max: 100
    
  - platform: homeassistant
    entity_id: binary_sensor.heating
    id: coffee_heating
    internal: true

time:
  - platform: homeassistant
    id: esptime

text_sensor:
  - platform: template
    # name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start
    internal: True

  - platform: wifi_info
    ip_address:
      # name: ESP IP Address
      id: ip_address
      
  - platform: homeassistant
    entity_id: switch.zw1_c_switch
    id: coffee_power
    internal: true
    
sensor:
  - platform: homeassistant
    entity_id: sensor.steam_actual
    id: steam_actual
    internal: true

  - platform: homeassistant
    entity_id: sensor.einspeisung_terasse_electricalmeasurement
    id: solar_actual
    internal: true

  - platform: homeassistant
    entity_id: sensor.steam_target
    id: steam_target
    internal: true
    
  - platform: homeassistant
    entity_id: sensor.heatexchanger_actual
    id: heatexchanger_actual
    internal: true
    
  - platform: adc
    pin: GPIO34
    name: "Light"
    update_interval: 5s
    filters:
      - multiply: 10
  - platform: uptime
    # name: Uptime Sensor
    internal: True
    id: uptime_sensor
    update_interval: 1s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                ("Uptime ") +
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

  - platform: wifi_signal
    # name: "WiFi Signal Sensor"
    internal: True
    id: wifi_signal_sensor
    update_interval: 5s   
    
# Define a PWM output on the ESP32
output:
  - platform: ledc
    pin: 21
    id: backlight_pwm
  - platform: ledc
    pin: GPIO17
    id: ledb
    inverted: true
  - platform: ledc
    pin: GPIO4
    id: ledr
    inverted: true
  - platform: ledc
    pin: GPIO16
    id: ledg
    inverted: true

# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: backlight_pwm
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON
    effects:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
      - pulse:
          name: "Slow Pulse"
    # transition_length: 1s      # defaults to 1s
          update_interval: 2s
      - flicker:
          name: Flicker Effect
          alpha: 95%
          intensity: 2.1%
          
  - platform: rgb
    name: "RGB"
    red: ledr
    green: ledg
    blue: ledb
    effects:
      - random:
          name: "My Slow Random Effect"
          transition_length: 30s
          update_interval: 30s
      - random:
          name: "My Fast Random Effect"
          transition_length: 4s
          update_interval: 5s
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
      - pulse:
          name: "Slow Pulse"
          transition_length: 1s
          update_interval: 2s
      - flicker:
          name: Flicker Effect
          alpha: 95%
          intensity: 2.1%
      - strobe:
          name: Strobe Effect With Custom Values
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 90%
              blue: 0%
              duration: 500ms
            - state: false
              duration: 250ms
            - state: true
              brightness: 100%
              red: 0%
              green: 100%
              blue: 0%
              duration: 500ms

#  - platform: monochromatic
#    output: ledr
#    name: "Back R"
    
#  - platform: monochromatic
#    output: ledg
#    name: "Back G"
    
#  - platform: monochromatic
#    output: ledb
#    name: "Back B"

display:
  - platform: ili9341
    model: TFT 2.4
    rotation: 90
    spi_id: lcd
    cs_pin: 15
    dc_pin: 2
    lambda: |-
      int hs = it.get_width() / 2; // Horizontal Spacing = text data horizontal center point
      int hq = it.get_width() / 4; // text data horizontal center for two vertical lines
      int vs = it.get_height() / 8; // Vertical Center = text data vertical center point = how many lines
      int line_gap = 16; // distance of line from center of data text
      it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));
      it.rectangle(0, 20, it.get_width(), it.get_height(), id(my_blue));

      it.strftime(5, 5, id(helvetica_12), id(my_white), TextAlign::TOP_LEFT, "%H:%M:%S", id(esptime).now());
      it.print(hs, 5, id(helvetica_12), id(my_blue), TextAlign::TOP_CENTER, "${esp_name}"); //print title  
      
      if (id(system_status).state) {
        it.print(it.get_width()-5, 5, id(helvetica_12), id(my_green), TextAlign::TOP_RIGHT, "Online");
      }
      else {
        it.print(it.get_width()-5, 5, id(helvetica_12), id(my_red), TextAlign::TOP_RIGHT, "Offline");
      }
      it.line(0, it.get_height()-20, it.get_width(), it.get_height()-20, id(my_blue)); // line across bottom above footer text
      it.printf(5, it.get_height()-3, id(helvetica_12), id(my_gray), TextAlign::BOTTOM_LEFT, "%s", id(uptime_human).state.c_str());
      it.printf(hs, it.get_height()-3, id(helvetica_12), id(my_gray), TextAlign::BOTTOM_CENTER, "%.0fdBm", id(wifi_signal_sensor).state);
      it.printf(it.get_width()-5, it.get_height()-3, id(helvetica_12), id(my_gray), TextAlign::BOTTOM_RIGHT, "%s", id(ip_address).state.c_str());
      
      if (id(coffee_power).state == "on") {
        it.image(hq - 25, 40, id(coffee_filled));
        it.printf(10, (vs * 6) + 4, id(helvetica_24), id(my_gray), TextAlign::BOTTOM_LEFT, "Dampf: %.f / %.f", id(steam_actual).state, id(steam_target).state);
        it.printf(10, (vs * 7) + 4, id(helvetica_24), id(my_gray), TextAlign::BOTTOM_LEFT, "Wasser: %.f", id(heatexchanger_actual).state);
        if (id(coffee_heating).state) {
          it.printf(it.get_width() - 10, (vs * 7) + 4, id(helvetica_24), id(my_gray), TextAlign::BOTTOM_RIGHT, "Heizung: an");
        } else {
          it.printf(it.get_width() - 10, (vs * 7) + 4, id(helvetica_24), id(my_gray), TextAlign::BOTTOM_RIGHT, "Heizung: aus");
        } 
      } else {
        it.image(hq - 25, 40, id(coffee));
        it.printf(10, (vs * 6) + 4, id(helvetica_24), id(my_gray), TextAlign::BOTTOM_LEFT, "Solar Terasse: %.f W", id(solar_actual).state);
      }
      it.image(3*hq - 25, 40, id(radio));

      it.line(0, vs * 4, it.get_width(), vs * 4, id(my_blue));
      it.print(hs, vs * 4 + line_gap, id(helvetica_24), id(my_white), TextAlign::CENTER, "Lelit MaraX");
      it.line(0, vs * 5, it.get_width(), vs * 5, id(my_blue));
      

#      it.print(hq, vs * 5, id(helvetica_12), id(my_white), TextAlign::CENTER, "Temperature:");
#      it.printf(3*hq, vs * 5, id(helvetica_12), id(my_white), TextAlign::CENTER, "%.1fÂ°C", id(bme_temperature).state);
#      it.print(hq, vs * 6, id(helvetica_12), id(my_white), TextAlign::CENTER, "Pressure:");
#      it.printf(3*hq, vs * 6, id(helvetica_12), id(my_white), TextAlign::CENTER, "%.0fhPa", id(bme_humidity).state);


touchscreen:
  id: my_touchscreen
  platform: xpt2046
  spi_id: touch
  cs_pin: 33
  interrupt_pin: 36
  update_interval: 50ms
  report_interval: 250ms
  threshold: 400
  calibration_x_min: 3700
  calibration_x_max: 450
  calibration_y_min: 180
  calibration_y_max: 3700
  swap_x_y: false
  on_touch:
    - lambda: |-
        ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
          id(my_touchscreen).x,
          id(my_touchscreen).y,
          id(my_touchscreen).x_raw,
          id(my_touchscreen).y_raw
        );

# Exposed switches.
switch:
  - platform: restart
    name: ESP32-2432S028 Restart